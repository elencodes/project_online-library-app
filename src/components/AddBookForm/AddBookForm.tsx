import { useState, useEffect } from "react";
import { useTypedDispatch } from "../../hooks/useTypedDispatch";
import useTypedValidation from "../../hooks/useTypedValidation";
import { IFormValid } from "../../hooks/useTypedValidation";
import { IAddedBook } from "../../types/addedBooksTypes";
import { addBookAction } from "../../store/actionCreators/addedBooksActionCreators";
import { fileToBase64 } from "../../utils/fileToBase64";
import GoBackButton from "../Buttons/GoBackButton/GoBackButton";
import SubmitButton from "../Buttons/SubmitButton/SubmitButton";
import ClearButton from "../Buttons/ClearButton/ClearButton";
import uploadIcon from "../../assets/icons/buttons/upload.svg";
import doneIcon from "../../assets/icons/buttons/done.svg";
import styles from "./AddBookForm.module.scss";

const AddBookForm = () => {
	// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π useDispatch
	const dispatch = useTypedDispatch();

	// –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–æ—Ä–º—ã
	const [formData, setFormData] = useState({
		id: "",
		cover: null as File | null,
		title: "",
		author: "",
		genre: "",
		description: "",
	});

	//–°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–±–ª–æ–∂–∫–∏
	const [preview, setPreview] = useState<string | null>(null);
	// –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ (–æ–±–ª–æ–∂–∫–∏)
	const [fileName, setFileName] = useState<string | null>(null);

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ö—É–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
	const {
		formErrors,
		setFormErrors,
		formValid,
		setFormValid,
		isDisabled,
		setIsDisabled,
		validateField,
	} = useTypedValidation();

	const isValid =
		formValid.cover &&
		formValid.title &&
		formValid.author &&
		formValid.genre &&
		formValid.description;

	// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
	const [showNotification, setShowNotification] = useState<boolean>(false);

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
	const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
		const file = e.target.files?.[0] || null;

		// –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–∞–º—è—Ç—å –æ—Ç —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ URL
		if (preview) {
			URL.revokeObjectURL(preview);
		}
		// –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–æ—Ä–º—ã
		setFormData((prev) => ({ ...prev, cover: file }));
		// –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–∞–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞
		validateField("cover", file);
		// –ï—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω, —Å–æ–∑–¥–∞–µ–º URL –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
		if (file) {
			const objectUrl = URL.createObjectURL(file);
			setPreview(objectUrl);
			// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏ –µ–≥–æ —Ç–∏–ø
			setFileName(
				file.name.length > 50 ? file.name.slice(0, 47) + "..." : file.name
			);
		} else {
			setPreview(null);
			setFileName(null);
		}
	};

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã
	const handleInputChange = (
		e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>
	) => {
		const { name, value } = e.target;
		// –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–æ—Ä–º—ã
		setFormData((prev) => ({ ...prev, [name]: value }));
		// –ó–∞–ø—É—Å–∫–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—è
		validateField(name as keyof IFormValid, value);
	};

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
	const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
		e.preventDefault();

		// –ó–∞–ø—É—Å–∫–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª–µ–π –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
		Object.entries(formData).forEach(([key, value]) => {
			validateField(key as keyof IFormValid, value);
		});

		if (isValid) {
			const coverBase64 = formData.cover
				? await fileToBase64(formData.cover)
				: "";
			// –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–Ω–∏–≥–∏
			const newBook: IAddedBook = {
				id: Date.now().toString(), // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π id
				cover: coverBase64,
				title: formData.title,
				author: [formData.author],
				genre: [formData.genre],
				description: formData.description,
				originalFile: formData.cover,
			};

			console.log("Dispatching addBookAction:", newBook);
			dispatch(addBookAction(newBook));

			// –õ–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ API –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ)
			console.log("New book added:", formData);

			// –û—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º—ã –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–∏–≥–∏
			setFormData({
				id: "",
				cover: null,
				title: "",
				author: "",
				genre: "",
				description: "",
			});

			setShowNotification(true); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ

			setPreview(null);
			setFileName(null);
			setIsDisabled(false);
		} else {
			console.log("–§–æ—Ä–º–∞ –Ω–µ –ø—Ä–æ—à–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é", formErrors);
		}
	};

	const handleClearFile = () => {
		// –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–∞–º—è—Ç—å –æ—Ç —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ URL
		if (preview) {
			URL.revokeObjectURL(preview);
			setPreview(null);
		}
		// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–∞–π–ª–∞
		setFormData((prev) => ({ ...prev, cover: null }));
		setFileName(null);
		setFormValid((prev) => ({ ...prev, cover: true }));
		// –Ø–≤–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—à–∏–±–∫—É, —Ç–∞–∫ –∫–∞–∫ –æ–±–ª–æ–∂–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞
		setFormErrors((prev) => ({
			...prev,
			cover: "Cover image is required!",
		}));
	};

	// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
	const closeNotification = () => {
		setShowNotification(false);
	};

	useEffect(() => {
		return () => {
			if (preview) {
				URL.revokeObjectURL(preview);
			}
		};
	}, [preview]);

	// C–ª–µ–¥–∏–º –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –≤ formValid –∏ –±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö –≤–∞–ª–∏–¥–∞—Ü–∏–∏
	useEffect(() => {
		// –ï—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –ø–æ–ª–µ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ, –∫–Ω–æ–ø–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞
		if (!isValid) {
			setIsDisabled(true); // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
		} else {
			setIsDisabled(false); // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ –≤—Å–µ –ø–æ–ª—è –≤–∞–ª–∏–¥–Ω—ã
		}
	}, [isValid, setIsDisabled]);

	return (
		<>
			<div className="page__background">
				<div className="container">
					<section className={styles.section}>
						<GoBackButton text={"Back to Library"} />
						<form
							className={styles.form__container}
							onSubmit={handleSubmit}
						>
							<div className={styles.input__container}>
								<label className={styles.input__label}>Cover</label>
								<div
									className={`${styles.box__input_file} ${
										styles.input__item
									} ${formErrors.cover ? styles.invalid : ""}`}
								>
									<p className={styles.input__file_placeholder}>
										{preview
											? "The file is uploaded"
											: "Choose a file"}
										<img
											className={
												preview
													? styles.file_placeholder__icon
													: styles.placeholder__upload_icon
											}
											src={preview ? doneIcon : uploadIcon}
											alt={preview ? "done" : "upload"}
										/>
									</p>
									<input
										className={styles.input__file}
										type="file"
										name="cover"
										onChange={handleFileChange}
									/>
								</div>
								{preview && (
									<div className={styles.preview}>
										<div className={styles.preview__box}>
											<div className={styles.preview__image_box}>
												<img
													className={styles.preview__image}
													src={preview}
													alt=""
												/>
											</div>
											<p className={styles.preview__image_title}>
												{fileName}
											</p>
										</div>
										<ClearButton
											onClick={handleClearFile}
											isVisible={!!preview || !!formErrors.cover}
										/>
									</div>
								)}
								{formErrors.cover && (
									<p className={styles.error}>{formErrors.cover}</p>
								)}
							</div>
							{[
								{
									label: "Title",
									name: "title",
									type: "text",
									value: formData.title,
								},
								{
									label: "Author",
									name: "author",
									type: "text",
									value: formData.author,
								},
								{
									label: "Genre",
									name: "genre",
									type: "text",
									value: formData.genre,
								},
							].map(({ label, name, type, value }) => (
								<div key={name} className={styles.input__container}>
									<label className={styles.input__label}>
										{label}
									</label>
									<input
										className={`${styles.input__item} ${
											formErrors[name] ? styles.invalid : ""
										}`}
										type={type}
										name={name}
										value={value}
										onChange={handleInputChange}
									/>
									{formErrors[name] && (
										<p className={styles.error}>{formErrors[name]}</p>
									)}
								</div>
							))}
							<div className={styles.input__container}>
								<label className={styles.description__label}>
									About book
								</label>
								<textarea
									className={`${styles.input__item} ${
										styles.textarea
									} ${formErrors.description ? styles.invalid : ""}`}
									name="description"
									placeholder="Enter description of the book..."
									value={formData.description}
									onChange={handleInputChange}
								></textarea>
								{formErrors.description && (
									<p className={styles.error}>
										{formErrors.description}
									</p>
								)}
							</div>
							<SubmitButton text={"Add book"} isDisabled={isDisabled} />
						</form>
					</section>
					{showNotification && (
						<div className={styles.notification}>
							<p className={styles.notification__text}>
								Your book was{" "}
								<span className={styles.text__success}>
									successfully added!
								</span>{" "}
								üéâ
							</p>
							<button
								className={styles.closeButton}
								onClick={closeNotification}
							>
								&times;
							</button>
						</div>
					)}
				</div>
			</div>
		</>
	);
};

export default AddBookForm;
